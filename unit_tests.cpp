#include "unit_tests.h"
#include <iostream>
#include "ColourRGB565.h"
#include "ColourRampGenerator.h"

// Adopt screen dimensions utilised in Display class
#define W 16
#define H 9

unsigned short pixels[H][W];
ColourRampGenerator* crg;
ColourRGB565 tl, tr, bl, br;

void set_up(const ColourRGB565& tl_,
		    const ColourRGB565& tr_,
		    const ColourRGB565& bl_,
		    const ColourRGB565& br_)
{
	crg = ColourRampGenerator::create(tl_, tr_, bl_, br_, W, H, 0, 0);
	for(unsigned int row = 0; row < H; ++row)
		crg->get_row(0, row, W, pixels[row]);
}

bool compare(unsigned short result_[H][W])
{
	for(unsigned int row = 0; row < H; ++row)
		for(unsigned int col = 0; col < W; ++col)
			if((result_[row][col]) != (pixels[row][col]))
				return false;
	return true;
}

void tear_down()
{
	delete crg; crg = NULL;
}

using std::cout; using std::endl;
void call_unit_tests()
{
	// returns after first failing unit test
	if(!unit_test1()) return;
	if(!unit_test2()) return;
	if(!unit_test3()) return;
	if(!unit_test4()) return;

	cout << "All unit tests passed." << endl;
}

// Test when each pixel has the same colour
bool unit_test1()
{
	tl = ColourRGB565(0xFFFF);
	tr = ColourRGB565(0xFFFF);
	bl = ColourRGB565(0xFFFF);
	br = ColourRGB565(0xFFFF);

	set_up(tl, tr, bl, br);

	unsigned short result[H][W] =
	{{0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF},
	 {0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF}};

	const bool ret = compare(result);
	if(!ret)
		cout << "unit_test1 failed" << endl;

	tear_down();
	return ret;
}

// Test when each row of pixels is identical.
bool unit_test2()
{
	tl = ColourRGB565(0x0000);
	tr = ColourRGB565(0x000f);
	bl = ColourRGB565(0x0000);
	br = ColourRGB565(0x000f);

	set_up(tl, tr, bl, br);

	unsigned short result[H][W] =
	{{0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F}};

	const bool ret = compare(result);
	if(!ret)
		cout << "unit_test2 failed" << endl;

	tear_down();
	return ret;
}

//Test when all columns of pixels are identical
bool unit_test3()
{
	tl = ColourRGB565(0x0);
	tr = ColourRGB565(0x0);
	bl = ColourRGB565(0x8);
	br = ColourRGB565(0x8);

	set_up(tl, tr, bl, br);

	unsigned short result[H][W] =
	{{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
	 {0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001},
	 {0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002},
	 {0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003},
	 {0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004},
	 {0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005},
	 {0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006},
	 {0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007},
	 {0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008}};

	const bool ret = compare(result);
	if(!ret)
		cout << "unit_test3 failed" << endl;

	tear_down();
	return ret;
}

//Test a generic case which is (nearly) symmetric along the tl->br diagonal
bool unit_test4()
{
	tl = ColourRGB565(0x0);
	tr = ColourRGB565(0xf);
	bl = ColourRGB565(0xf);
	br = ColourRGB565(0x0);

	set_up(tl, tr, bl, br);

	unsigned short result[H][W] =
	{{0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F},
	 {0x0002,0x0003,0x0003,0x0004,0x0005,0x0006,0x0006,0x0007,0x0008,0x0009,0x0009,0x000A,0x000B,0x000C,0x000C,0x000D},
	 {0x0004,0x0004,0x0005,0x0005,0x0006,0x0006,0x0007,0x0007,0x0008,0x0008,0x0009,0x0009,0x000A,0x000A,0x000B,0x000B},
	 {0x0006,0x0006,0x0006,0x0007,0x0007,0x0007,0x0007,0x0007,0x0008,0x0008,0x0008,0x0008,0x0008,0x0009,0x0009,0x0009},
	 {0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008},
	 {0x0009,0x0009,0x0009,0x0008,0x0008,0x0008,0x0008,0x0008,0x0007,0x0007,0x0007,0x0007,0x0007,0x0006,0x0006,0x0006},
	 {0x000B,0x000B,0x000A,0x000A,0x0009,0x0009,0x0008,0x0008,0x0007,0x0007,0x0006,0x0006,0x0005,0x0005,0x0004,0x0004},
	 {0x000D,0x000C,0x000C,0x000B,0x000A,0x0009,0x0009,0x0008,0x0007,0x0006,0x0006,0x0005,0x0004,0x0003,0x0003,0x0002},
	 {0x000F,0x000E,0x000D,0x000C,0x000B,0x000A,0x0009,0x0008,0x0007,0x0006,0x0005,0x0004,0x0003,0x0002,0x0001,0x0000}};

	const bool ret = compare(result);
	if(!ret)
		cout << "unit_test4 failed" << endl;

	tear_down();
	return ret;
}
